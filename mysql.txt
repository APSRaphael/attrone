	
	
	
	
	mysql -V;
	
	
	net start mysql;
	-p;
	
	mysql>SELECT VERSION();

	mysql>SELECT USER();

	net stop mysql;
	
	mysql -uroot -p;
	mysql>CREATE DATABASE t1;

	mysql>SHOW DATABASES;
	
	mysql>CREATE DATABASE IF NOT EXITS t1;

	mysql>SHOW CREATE DATABASE t1;

	mysql>CREATE DATABASE IF NOT EXITS t2 CHARACTER SET gbk;

	mysql>ALTER DATABASE t2 CHARACTER SET utf8;//修改数据库编码

	mysql>DROP DATABASE t2;

	mysql>DROP DATABASE IF EXISTS t2;
	
	mysql>SHOW WARNINGS;
	
	USE test;//使用test这个数据库
	
	mysql>SELECT DATABASE();//显示打开的数据库
	
	CREATE TABLE tb1(
	username VARCHAR(20),
	age TINYINT UNSIGNED,
	salary FLOAT(8,2) UNSIGNED,
	);
	
	SHOW TABLES;
	SHOW COLUMNS FROM tb1;//显示表的列
	
	INSERT tb1 VALUES('Tom',25,6958.25);//给全部的属性赋值
	
	INSERT tb1(username,salary) VALUES('John',5896);
	
	SELECT * FROM tb1;
	
	CREATE TABLE tb2(
	username VARCHAR(20) NOT NULL,//不准为空
	age TINYINT UNSIGNED NULL
	);
	
	INSERT tb2 VALUES('LISI',NULL);
	
	CREATE TABLE tb3(
	id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,//递增的索引
	username VARCHAR(30) NOT NULL
	);
	SHOW COLUMNS FROM tb3;
	INSERT tb3(username) VALUES('Tom');
	INSERT tb3(username) VALUES('Jack');
	INSERT tb3(username) VALUES('axi');
	INSERT tb3(username) VALUES('Jhon');
	
	
	id   username
	1		Tom
	2		Jack
	3		axi
	4		Jhon
	
	
	CREATE TABLE tb5(
	id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	username VARCHAR(20) NOT NULL UNIQUE KEY,//唯一约束
	age tinyint unsigned
	);
	
	CREATE TABLE tb6(
	id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	username VARCHAR(20) NOT NULL UNIQUE KEY,
	sex ENUM('1','2','3') DEFAULT '2'               //随机选择一个数，没有就选默认的
	);
	
	
	INSERT tb6(username) VALUES('Tom');
	
	
	CREATE TABLE provinces(
	id SMALLINT PRIMARY KEY AUTO_INCREMENT,
	pname VARCHAR(20) NOT NULL
	);
	//外键约束
	CREATE TABLE users(
	id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
	username VARCHAR(10) NOT NULL,
	pid SMALLINT,
	FOREIGN KEY (pid) REFERENCES provinces(id)//与provinces中的id类型要一样
	);
	
	SHOW INDEXES FROM provinces;
	SHOW INDEXES FROM provinces\G;//
	
	外键约束的参照操作：
	1.CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行。
	2.SET NULL:从父表删除或更新行，并设置子表中的外键列为NULL。如果使用该选项，必须保证子表列中没有指定NOT NULL。
	3.RESTRICT：拒绝对父表的删除或更新操作。
	4.NO ACTION：标准SQL的关键字，在MySQL中与RESTRICT相同。
	
	
	//添加column
	//默认添加到最后一列
	ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10;
	//插入到username后面
	ALTER TABLE users1 ADD password VARCHAR(32) NOT NULL AFTER username;
	//插入到最前面
	ALTER TABLE users1 ADD truename VARCHAR(20) NOT NULL FIRST;
	
	//删除列
	ALTER TABLE users1 DROP truename;//一列
	
	ALTER TABLE users1 DROP password,DROP age;//多列
	
	CREATE TABLE users2(
	username VARCHAR(10) NOT NULL,
	pid SMALLINT UNSIGNED
	);
	
	ALTER TABLE users2 ADD id SMALLINT UNSIGNED;
	
	ALTER TABLE users2 ADD CONSTRAINT PK_users2_id PRIMARY KEY (id);//添加主键约束
	
	ALTER TABLE users2 ADD FOREIGN KEY (pid) REFERENCES provinces (id);
	
	ALTER TABLE users2 ALTER age SET DEFAULT 15;
	
	ALTER TABLE users2 ALTER age DROP DEFAULT;
	
	
	//修改数据类型和在列的位置
	ALTER TABLE users2 MODIFY id TINYINT UNSIGNED NOT NULL FIRST;
	
	//修改pid为p_id;
	ALTER TABLE users2 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;
	
	//数据表的修改-将users2改成users3
	ALTER TABLE users2 RENAME users3;
	
	//数据表的修改-将users3改成users2
	RENAME TABLE users3 TO users2;
	
	
	
	CREATE TABLE users(
	id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
	username VARCHAR(20) NOT NULL ,
	password VARCHAR(32) NOT NULL ,
	age tinyint unsigned NOT NULL DEFAULT 10,
	sex BOOLEAN ,
	);
	
	INSERT users VALUES(DEFAULT,'Jhon','123',25,1);
	
	INSERT users VALUES(DEFAULT,'Jhon','123',DEFAULT,1);
	
	//插入多条数据
	INSERT users VALUES(DEFAULT,'Jhon','123',DEFAULT,1),(NULL,'Rose',md5('123'),NULL,0);
	
	
	INSERT users SET username='Ben',password='456';
	
	//单表更新
	UPDATE users set age=age+5;
	
	UPDATE users set age=age-id,sex=0;
	
	UPDATE users set age=age+10 WHERE id % 2 = 0;
	
	//删除
	//id
	//1
	//2
	//3
	//4
	//5
	//6
	DELETE FROM users WHERE id=6;
	
	INSERT users VALUES(NULL,'111','222',33,NULL);
	//1
	//2
	//3
	//4
	//5
	//7
	
	//select 语句
	
	SELECT id ,username FROM users;
	
	SELECT username ,id FROM users;
	
	SELECT users.username ,users.id FROM users;
	
	SELECT id AS userId,username AS uname FROM users;
	
	
	
	SELECT sex FROM users GROUP BY sex;
	SELECT sex FROM users GROUP BY 1;
	SELECT id,sex FROM users GROUP BY 2;//sex在第2个
	
	SELECT id,username,age,sex FROM users BY sex;
	
	SELECT sex FROM users GROUP BY 1 HAVING age>35;
	
	SELECT sex FROM users GROUP BY 1 HAVING count(id)>=2;
	
	ASC:升序
	DESC:降序
	
	SELECT * FROM users ORDER BY id DESC;
	
	SELECT * FROM users ORDER BY age;
	SELECT * FROM users ORDER BY age,id DESC;//先age排序，再id
	
	//1,2,3,4,5,7
	
	SELECT * FROM users LIMIT 2;//id 1-2
	
	SELECT * FROM users LIMIT 3,2;//4-5
	
	SELECT * FROM users LIMIT 2,2;//3-4
	
	SELECT * FROM users ORDER BY id DESC;
	//7,5,4,3,2,1
	
	SELECT * FROM users LIMIT 2,2;//4-3
	
	//将users中age>=30的数据复制到test表中
	INSERT test(username) SELECT username FROM users WHERE age>=30;
	
	
	SELECT * FROM tdb_goods\G;//以结果集的形式展示
	
	
	SELECT AVG(goods_price) FROM tdb_goods;//求平均值
	SELECT ROUND(AVG(goods_price),2) FROM tdb_goods;//求值后取两位小数
	SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price>=5636.36;
	SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price>=(SELECT ROUND(AVG(goods_price),2) FROM tdb_goods);//子查询
	SELECT goods_price FROM tdb_goods WHERE goods_cate ='超级本';
	SELECT * FROM tdb_goods WHERE goods_cate='超级本';
	SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price>ALL(SELECT goods_price FROM tdb_goods WHERE goods_cate ='超级本');
	SELECT goods_id,goods_name,goods_price FROM tdb_goods WHERE goods_price>ANY(SELECT goods_price FROM tdb_goods WHERE goods_cate ='超级本');
	
	//显示字段名
	DESC tdb_goods_cates;
	SHOW COLUMNS FROM tdb_goods_cates;
	//INSERT SELECT 语句
	INSERT tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;
	
	//多表更新
	UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate=cate_name SET goods_cate=cate_id;
	
	
	
	
	
	